
# All of the following are rules for deciding how to scan at
# a given directory.  Rules can have any name aside from 'fzsl'
#
# Rules can take any of the following parameters.  Only 'cmd'
# is required.  You can also see the documentation in scanner.py
# for more information on rule related arguments.
#
# cmd:  The command to execute in the root directory that will
#   output all possible matches.  By default, the current
#   working directory of the command will be the same as
#   that of the caller.  However, if root_path is specified,
#   it will be used instead.
#
# detect_cmd:  This command will be executed to determine if
#   the rule is a possible match for the current working
#   directory.  The command should return 0 for a valid
#   directory.
#
# root_path:  The root path has two possible uses.  First,
#   if the current working directory is a subdirectory of the
#   root path, the rule will be consider suitable for use when
#   scanning.  Second, if the root_path is specified along with
#   detect_cmd, then the root_path will be used as the current
#   working directory when executing the detect_cmd.
#
# priority:  The priority is used to determine which rule to use
#   when multiple rules are considered suitable.  The higher the
#   priority, the more likely it will be selected.  Rules with a
#   priority less than 0 are never considered unless manually
#   selected.
#
# If no rules are considered suitable for the current working
# directory, then a rule will be created that simply executes
# 'find .'.


# Standard git rule
[git]
detect_cmd = git rev-parse
cmd = git ls-files
# See git-ls-files(1) for other options like adding '-o' to
# also include untracked files
priority = 10

# Override the default by creating any rule that doesn't
# have a root_path or detect_cmd.
[default]
cmd = find . -maxdepth 10
priority = 0

# vim: ft=dosini
