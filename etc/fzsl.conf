
# All of the following are rules for deciding how to scan at
# a given directory.  Rules can have any name aside from 'fzsl'
#
# Rules can take any of the following parameters.  Only 'cmd'
# is required.  You can also see the documentation in scanner.py
# for more information on rule related arguments.  For
# parameters that accept a path, ~ can be used in place of the
# full path to the user's home directory.
#
# If no rules are considered suitable for the current working
# directory, then a rule will be created that simply executes
# 'find .'.

# Scanner options:
#
# type:  This signifies the type of Scanner to be built.  Currently
#   the supported scanner types are: simple.  See below
#   for options that can be passed to each type of scanner.

# Simple scanners:
#
# These scanners use simple bash command/functions to detect and
# scan for files.  These are the simplest to configure and ideally
# will support the vast majority of use cases.  If there is a
# common use case that is not supported, it is a candidate to be
# included in fzsl directly.
#
# type: simple
#
# cmd:  The command to execute in the root directory that will
#   output all possible matches.  By default, the current
#   working directory of the command will be the same as
#   that of the caller.  However, if root_path is specified,
#   it will be used instead.
#
# detect_cmd:  This command will be executed to determine if
#   the rule is a possible match for the current working
#   directory.  The command should return 0 for a valid
#   directory.
#
# root_path:  The root path has two possible uses.  First,
#   if the current working directory is a subdirectory of the
#   root path, the rule will be consider suitable for use when
#   scanning.  Second, if the root_path is specified along with
#   detect_cmd, then the root_path will be used as the current
#   working directory when executing the detect_cmd.
#
# priority:  The priority is used to determine which rule to use
#   when multiple rules are considered suitable.  The higher the
#   priority, the more likely it will be selected.  Rules with a
#   priority less than 0 are never considered unless manually
#   selected.
#
# cache:  Path to a file that will be used to cache results for
#   for this rule.  By default, scanners will use the cache rather
#   than rescanning the entire file list.  Note that the cache
#   is tied to the rule, so if the same 'cmd' needs to be used
#   with two different caches, it will have to be two different
#   rules.  If no cache is supplied, results will just be
#   regenerated on each run.  This is probably fine unless you have
#   a really large number of files (tens of thousands) to scan or
#   a really slow disk.
#

# Standard git rule
[git]
type = simple
detect_cmd = git rev-parse
cmd = git ls-files
# See git-ls-files(1) for other options like adding '-o' to
# also include untracked files
priority = 10

# Example scanning git with submodules.  Note that this requires
# you have the shell functions in fzsl.bash available in your
# default shell, for example by sourcing in .bashrc.
# [git-submodule]
# detect_cmd = __fzsl_have_git_submodules
# cmd = __fzsl_scan_git_with_submodules
# All arguments to __fzsl_scan_git_with_submodules are passed to git-ls-files
# cmd = __fzsl_scan_git_with_submodules -o
# priority = 11

# If the directory has a large number of files such that scanning
# takes too long, a cache can be used.  The cache can be regenerated
# by an external script or by pressing F5 or ctrl+r in the UI.
#[linux]
# type = simple
#root_path = /usr/src/linux
#cmd = find .
#cache = ~/.fzsl-cache/linux

# Override the default by creating any rule that doesn't
# have a root_path or detect_cmd.
[default]
type = simple
cmd = find . -maxdepth 10
priority = 0

# Rule that will only be used when specifically passed
# via --rule to fzsl.
[dirs-only]
type = simple
cmd = find . -type d
priority = -1

# vim: ft=dosini
